/*
 * Copyright (c) 2016 Lokra Studio
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


group = 'org.lokra.seaweedfs'
version = '0.7.3.RELEASE'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

targetCompatibility = 1.7
sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile('com.fasterxml.jackson.core:jackson-databind:2.8.0')
    compile('com.fasterxml.jackson.core:jackson-core:2.8.0')
    compile('org.apache.httpcomponents:httpclient:4.5.2')
    compile('org.apache.httpcomponents:httpmime:4.5.2')
    compile('org.apache.httpcomponents:httpclient-cache:4.5.2')
    compile('org.ehcache:ehcache:3.1.1')
    compile('org.springframework:spring-core:4.3.1.RELEASE')
    compile('org.springframework:spring-beans:4.3.1.RELEASE')
    testCompile('junit:junit:4.11')
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {

            def repositoryUrl
            if (version.toString().split("\\.")[3] == "RELEASE")
                repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            else
                repositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: repositoryUrl) {
                if (project.hasProperty('sonatypeUsername'))
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description 'SeaweedFS Client For Java.'
                url 'https://github.com/lokra-platform/seaweedfs-client'

                scm {
                    url 'scm:git@github.com:lokra-platform/seaweedfs-client.git'
                    connection 'scm:git@github.com:lokra-platform/seaweedfs-client.git'
                    developerConnection 'git@github.com:lokra-platform/seaweedfs-client.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://mit-license.org'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'ChihoSin'
                        name 'Chiho Sin'
                    }
                }
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}